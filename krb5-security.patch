--- krb5-1.0.6/src/lib/rpc/xdr_mem.c.orig	Tue May 11 05:37:26 1999
+++ krb5-1.0.6/src/lib/rpc/xdr_mem.c	Thu Mar 20 19:11:01 2003
@@ -47,6 +47,8 @@
 #include <rpc/xdr.h>
 #include <netinet/in.h>
 #include <stdio.h>
+#include <string.h>
+#include <limits.h>
 
 static bool_t	xdrmem_getlong();
 static bool_t	xdrmem_putlong();
@@ -83,7 +85,7 @@
 	xdrs->x_op = op;
 	xdrs->x_ops = &xdrmem_ops;
 	xdrs->x_private = xdrs->x_base = addr;
-	xdrs->x_handy = size;
+	xdrs->x_handy = (size > INT_MAX) ? INT_MAX : size; /* XXX */
 }
 
 static void
@@ -98,8 +100,10 @@
 	long *lp;
 {
 
-	if ((xdrs->x_handy -= sizeof(rpc_int32)) < 0)
+	if (xdrs->x_handy < sizeof(rpc_int32))
 		return (FALSE);
+	else
+		xdrs->x_handy -= sizeof(rpc_int32);
 	*lp = (long)ntohl(*((rpc_u_int32 *)(xdrs->x_private)));
 	xdrs->x_private += sizeof(rpc_int32);
 	return (TRUE);
@@ -111,8 +115,10 @@
 	long *lp;
 {
 
-	if ((xdrs->x_handy -= sizeof(rpc_int32)) < 0)
+	if (xdrs->x_handy < sizeof(rpc_int32))
 		return (FALSE);
+	else
+		xdrs->x_handy -= sizeof(rpc_int32);
 	*(rpc_int32 *)xdrs->x_private = (rpc_int32)htonl((rpc_u_int32)(*lp));
 	xdrs->x_private += sizeof(rpc_int32);
 	return (TRUE);
@@ -125,8 +131,10 @@
 	register unsigned int len;
 {
 
-	if ((xdrs->x_handy -= len) < 0)
+	if (xdrs->x_handy < len)
 		return (FALSE);
+	else
+		xdrs->x_handy -= len;
 	memmove(addr, xdrs->x_private, len);
 	xdrs->x_private += len;
 	return (TRUE);
@@ -139,8 +147,10 @@
 	register unsigned int len;
 {
 
-	if ((xdrs->x_handy -= len) < 0)
+	if (xdrs->x_handy < len)
 		return (FALSE);
+	else
+		xdrs->x_handy -= len;
 	memmove(xdrs->x_private, addr, len);
 	xdrs->x_private += len;
 	return (TRUE);
@@ -179,7 +189,7 @@
 {
 	rpc_int32 *buf = 0;
 
-	if (xdrs->x_handy >= len) {
+	if (len >= 0 && xdrs->x_handy >= len) {
 		xdrs->x_handy -= len;
 		buf = (rpc_int32 *) xdrs->x_private;
 		xdrs->x_private += len;
